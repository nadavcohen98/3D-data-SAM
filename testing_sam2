import logging
import os
import sys

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("SAM2Test")

def test_sam2():
    logger.info("Starting SAM2 initialization test")
    
    # Check if the sam2 module is importable
    try:
        logger.info("Attempting to import sam2 module")
        import sam2
        logger.info(f"SAM2 module imported successfully: {sam2.__file__}")
        
        # Print module path and version if available
        if hasattr(sam2, '__version__'):
            logger.info(f"SAM2 version: {sam2.__version__}")
        
        # Check for sam2_image_predictor
        try:
            logger.info("Attempting to import SAM2ImagePredictor")
            from sam2.sam2_image_predictor import SAM2ImagePredictor
            logger.info("SAM2ImagePredictor imported successfully")
            
            # Check for available models
            logger.info("Checking for available models")
            
            # Try to initialize with various model names
            model_names = [
                "facebook/sam2-hiera-base",
                "SAM2",
                "sam2",
                "sam2-base",
                "facebook/sam2-base",
                "facebook/sam2-small",
                "sam2-l",
                "sam2_l"
            ]
            
            success = False
            for name in model_names:
                try:
                    logger.info(f"Trying to initialize SAM2 with model name: {name}")
                    sam2_model = SAM2ImagePredictor.from_pretrained(name)
                    logger.info(f"SUCCESS! Initialized SAM2 with model: {name}")
                    success = True
                    
                    # Optional: Check if the model has expected attributes
                    logger.info("Checking model attributes")
                    if hasattr(sam2_model, 'model'):
                        logger.info("Model has 'model' attribute")
                    if hasattr(sam2_model, 'predict_torch'):
                        logger.info("Model has 'predict_torch' method")
                    
                    break
                except Exception as e:
                    logger.warning(f"Failed to initialize with model name {name}: {str(e)}")
            
            if not success:
                # Try to check if there's a from_config method instead
                if hasattr(SAM2ImagePredictor, 'from_config'):
                    logger.info("SAM2ImagePredictor has from_config method, trying that instead")
                    try:
                        sam2_model = SAM2ImagePredictor.from_config({})
                        logger.info("SUCCESS! Initialized SAM2 with from_config")
                    except Exception as e:
                        logger.warning(f"Failed to initialize with from_config: {str(e)}")
                
                # Check if there's API documentation or help
                logger.info("Checking for API information:")
                logger.info(f"SAM2ImagePredictor docstring: {SAM2ImagePredictor.__doc__}")
                
                # List all methods of the class
                logger.info("Available methods on SAM2ImagePredictor:")
                for method_name in dir(SAM2ImagePredictor):
                    if not method_name.startswith('_'):
                        logger.info(f"  - {method_name}")
            
        except ImportError as e:
            logger.error(f"Failed to import SAM2ImagePredictor: {str(e)}")
            logger.info("Looking for alternatives in the module")
            
            # List all contents of sam2 module to find predictor classes
            logger.info("Contents of sam2 module:")
            for item in dir(sam2):
                if not item.startswith('_'):
                    logger.info(f"  - {item}")
            
    except ImportError as e:
        logger.error(f"Failed to import sam2 module: {str(e)}")
        
        # Check if the package is installed
        logger.info("Checking if SAM2 is installed via pip")
        try:
            import subprocess
            result = subprocess.run(["pip", "list"], capture_output=True, text=True)
            logger.info("Installed packages:")
            for line in result.stdout.split('\n'):
                if 'sam2' in line.lower():
                    logger.info(f"  {line}")
        except Exception as e:
            logger.error(f"Error checking pip packages: {str(e)}")
    
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
    
    logger.info("SAM2 initialization test complete")

if __name__ == "__main__":
    test_sam2()
